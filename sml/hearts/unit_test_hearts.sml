use "../unit_test/unit_test.sml";
use "hearts.sml";

val _ = let
	val _ = print "\n\n\n>>> begin test error output\n"

	val _ = UnitTest.enter("is_card_valid")

    val _ = UnitTest.assertTrue(is_card_valid(Clubs, Ace))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, King))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Queen))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Jack))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 10))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 9))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 8))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 7))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 6))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 5))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 4))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 3))
	val _ = UnitTest.assertTrue(is_card_valid(Clubs, Num 2))
	
    val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Ace))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, King))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Queen))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Jack))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 10))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 9))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 8))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 7))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 6))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 5))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 4))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 3))
	val _ = UnitTest.assertTrue(is_card_valid(Diamonds, Num 2))
	
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Ace))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, King))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Queen))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Jack))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 10))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 9))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 8))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 7))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 6))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 5))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 4))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 3))
	val _ = UnitTest.assertTrue(is_card_valid(Hearts, Num 2))
	
    val _ = UnitTest.assertTrue(is_card_valid(Spades, Ace))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, King))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Queen))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Jack))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 10))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 9))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 8))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 7))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 6))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 5))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 4))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 3))
	val _ = UnitTest.assertTrue(is_card_valid(Spades, Num 2))

    (* number cards outside of 2 and 10 inclusive are not valid *)
	val _ = UnitTest.assertFalse(is_card_valid(Spades, Num 1))
	val _ = UnitTest.assertFalse(is_card_valid(Spades, Num 11))
	val _ = UnitTest.assertFalse(is_card_valid(Spades, Num 425))
	val _ = UnitTest.assertFalse(is_card_valid(Spades, Num ~10))

	val _ = UnitTest.assertFalse(is_card_valid(Hearts, Num 1))
	val _ = UnitTest.assertFalse(is_card_valid(Hearts, Num 11))
	val _ = UnitTest.assertFalse(is_card_valid(Hearts, Num 425))
	val _ = UnitTest.assertFalse(is_card_valid(Hearts, Num ~10))

	val _ = UnitTest.assertFalse(is_card_valid(Diamonds, Num 1))
	val _ = UnitTest.assertFalse(is_card_valid(Diamonds, Num 11))
	val _ = UnitTest.assertFalse(is_card_valid(Diamonds, Num 425))
	val _ = UnitTest.assertFalse(is_card_valid(Diamonds, Num ~10))

	val _ = UnitTest.assertFalse(is_card_valid(Clubs, Num 1))
	val _ = UnitTest.assertFalse(is_card_valid(Clubs, Num 11))
	val _ = UnitTest.assertFalse(is_card_valid(Clubs, Num 425))
	val _ = UnitTest.assertFalse(is_card_valid(Clubs, Num ~10))

    val _ = UnitTest.leave()

	val INVALID_CARD = (Spades, Num(231))

	val _ = UnitTest.enter("are_all_cards_valid")
	val _ = UnitTest.assertTrue(are_all_cards_valid([]))
	val _ = UnitTest.assertTrue(are_all_cards_valid([(Spades, Ace)]))
	val _ = UnitTest.assertTrue(are_all_cards_valid([(Spades, Ace), (Diamonds, King)]))
	val _ = UnitTest.assertTrue(are_all_cards_valid([(Spades, Ace), (Diamonds, King), (Clubs, Num(7))]))
	val _ = UnitTest.assertTrue(are_all_cards_valid([(Spades, Ace), (Diamonds, King), (Clubs, Num(7)), (Clubs, Num(2))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([INVALID_CARD]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([INVALID_CARD, (Spades, Ace)]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), INVALID_CARD]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([INVALID_CARD, (Spades, Ace), (Diamonds, King)]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), INVALID_CARD, (Diamonds, King)]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), (Diamonds, King), INVALID_CARD]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([INVALID_CARD, (Spades, Ace), (Diamonds, King), (Clubs, Num(7))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), INVALID_CARD, (Diamonds, King), (Clubs, Num(7))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), (Diamonds, King), INVALID_CARD, (Clubs, Num(7))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), (Diamonds, King), (Clubs, Num(7)), INVALID_CARD]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([INVALID_CARD, (Spades, Ace), (Diamonds, King), (Clubs, Num(7)), (Clubs, Num(2))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), INVALID_CARD, (Diamonds, King), (Clubs, Num(7)), (Clubs, Num(2))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), (Diamonds, King), INVALID_CARD, (Clubs, Num(7)), (Clubs, Num(2))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), (Diamonds, King), (Clubs, Num(7)), INVALID_CARD, (Clubs, Num(2))]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([(Spades, Ace), (Diamonds, King), (Clubs, Num(7)), (Clubs, Num(2)), INVALID_CARD]))
	val _ = UnitTest.assertFalse(are_all_cards_valid([INVALID_CARD, INVALID_CARD, (Spades, Ace), INVALID_CARD, (Diamonds, King), INVALID_CARD, (Clubs, Num(7)), INVALID_CARD, INVALID_CARD, (Clubs, Num(2)), INVALID_CARD]))
    val _ = UnitTest.leave()

    (* ======================================================== *)
    (* NOTE: all tests from here on will only pass valid cards. *)
    (*       you need NOT check for validity or handle invalid cards from here on. *)
    (* ======================================================== *)

	val _ = UnitTest.enter("card_score")
	val _ = UnitTest.assertEquals_Int(13, card_score(Spades, Queen))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Ace))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, King))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Queen))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Jack))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 10))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 9))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 8))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 7))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 6))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 5))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 4))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 3))
	val _ = UnitTest.assertEquals_Int(1, card_score(Hearts, Num 2))
	val _ = UnitTest.assertEquals_Int(~10, card_score(Diamonds, Jack))
	
    val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Ace))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, King))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Queen))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Jack))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 10))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 9))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 8))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 7))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 6))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 5))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 4))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 3))
	val _ = UnitTest.assertEquals_Int(0, card_score(Clubs, Num 2))
	
    val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Ace))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, King))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Queen))
    
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 10))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 9))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 8))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 7))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 6))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 5))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 4))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 3))
	val _ = UnitTest.assertEquals_Int(0, card_score(Diamonds, Num 2))
	
    val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Ace))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, King))

	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Jack))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 10))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 9))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 8))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 7))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 6))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 5))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 4))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 3))
	val _ = UnitTest.assertEquals_Int(0, card_score(Spades, Num 2))
    val _ = UnitTest.leave()

	val all_clubs = [(Clubs, Ace), (Clubs, King), (Clubs, Queen), (Clubs, Jack), (Clubs, Num(10)), (Clubs, Num(9)), (Clubs, Num(8)), (Clubs, Num(7)), (Clubs, Num(6)), (Clubs, Num(5)), (Clubs, Num(4)), (Clubs, Num(3)), (Clubs, Num(2))]
	val all_diamonds = [(Diamonds, Ace), (Diamonds, King), (Diamonds, Queen), (Diamonds, Jack), (Diamonds, Num(10)), (Diamonds, Num(9)), (Diamonds, Num(8)), (Diamonds, Num(7)), (Diamonds, Num(6)), (Diamonds, Num(5)), (Diamonds, Num(4)), (Diamonds, Num(3)), (Diamonds, Num(2))]
	val all_hearts = [(Hearts, Ace), (Hearts, King), (Hearts, Queen), (Hearts, Jack), (Hearts, Num(10)), (Hearts, Num(9)), (Hearts, Num(8)), (Hearts, Num(7)), (Hearts, Num(6)), (Hearts, Num(5)), (Hearts, Num(4)), (Hearts, Num(3)), (Hearts, Num(2))]
	val all_spades = [(Spades, Ace), (Spades, King), (Spades, Queen), (Spades, Jack), (Spades, Num(10)), (Spades, Num(9)), (Spades, Num(8)), (Spades, Num(7)), (Spades, Num(6)), (Spades, Num(5)), (Spades, Num(4)), (Spades, Num(3)), (Spades, Num(2))]

	val all_aces = [(Clubs, Ace), (Diamonds, Ace), (Hearts, Ace), (Spades, Ace)]
	val all_kings = [(Clubs, King), (Diamonds, King), (Hearts, King), (Spades, King)]
	val all_queens = [(Clubs, Queen), (Diamonds, Queen), (Hearts, Queen), (Spades, Queen)]
	val all_jacks = [(Clubs, Jack), (Diamonds, Jack), (Hearts, Jack), (Spades, Jack)]
	val all_10s = [(Clubs, Num(10)), (Diamonds, Num(10)), (Hearts, Num(10)), (Spades, Num(10))]
	val all_9s = [(Clubs, Num(9)), (Diamonds, Num(9)), (Hearts, Num(9)), (Spades, Num(9))]
	val all_8s = [(Clubs, Num(8)), (Diamonds, Num(8)), (Hearts, Num(8)), (Spades, Num(8))]
	val all_7s = [(Clubs, Num(7)), (Diamonds, Num(7)), (Hearts, Num(7)), (Spades, Num(7))]
	val all_6s = [(Clubs, Num(6)), (Diamonds, Num(6)), (Hearts, Num(6)), (Spades, Num(6))]
	val all_5s = [(Clubs, Num(5)), (Diamonds, Num(5)), (Hearts, Num(5)), (Spades, Num(5))]
	val all_4s = [(Clubs, Num(4)), (Diamonds, Num(4)), (Hearts, Num(4)), (Spades, Num(4))]
	val all_3s = [(Clubs, Num(3)), (Diamonds, Num(3)), (Hearts, Num(3)), (Spades, Num(3))]
	val all_2s = [(Clubs, Num(2)), (Diamonds, Num(2)), (Hearts, Num(2)), (Spades, Num(2))]

	val _ = UnitTest.enter("total_score_of_card_list")
	val _ = UnitTest.assertEquals_Int(0, total_score_of_card_list([]))
	val _ = UnitTest.assertEquals_Int(13, total_score_of_card_list([(Spades, Queen)]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list([(Hearts, King)]))
	val _ = UnitTest.assertEquals_Int(~10, total_score_of_card_list([(Diamonds, Jack)]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_card_list([(Clubs, Ace)]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_card_list(all_clubs))
	val _ = UnitTest.assertEquals_Int(~10, total_score_of_card_list(all_diamonds))
	val _ = UnitTest.assertEquals_Int(13, total_score_of_card_list(all_hearts))
	val _ = UnitTest.assertEquals_Int(13, total_score_of_card_list(all_spades))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_aces))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_kings))
	val _ = UnitTest.assertEquals_Int(14, total_score_of_card_list(all_queens))
	val _ = UnitTest.assertEquals_Int(~9, total_score_of_card_list(all_jacks))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_10s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_9s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_8s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_7s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_6s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_5s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_4s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_3s))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_card_list(all_2s))
    val _ = UnitTest.leave()

    (* ======================================================== *)
    (* NOTE: total_score_of_player_list must be tail recursive. *)
    (* ======================================================== *)

	val _ = UnitTest.enter("total_score_of_player_list")
	val _ = UnitTest.assertEquals_Int(0, total_score_of_player_list([]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_player_list([[]]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_player_list([[],[]]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_player_list([[],[],[]]))
	val _ = UnitTest.assertEquals_Int(13, total_score_of_player_list([[(Spades, Queen)]]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([[(Hearts, King)]]))
	val _ = UnitTest.assertEquals_Int(~10, total_score_of_player_list([[(Diamonds, Jack)]]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_player_list([[(Clubs, Ace)]]))
	val _ = UnitTest.assertEquals_Int(0, total_score_of_player_list([all_clubs]))
	val _ = UnitTest.assertEquals_Int(~10, total_score_of_player_list([all_diamonds]))
	val _ = UnitTest.assertEquals_Int(13, total_score_of_player_list([all_hearts]))
	val _ = UnitTest.assertEquals_Int(13, total_score_of_player_list([all_spades]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_aces]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_kings]))
	val _ = UnitTest.assertEquals_Int(14, total_score_of_player_list([all_queens]))
	val _ = UnitTest.assertEquals_Int(~9, total_score_of_player_list([all_jacks]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_10s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_9s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_8s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_7s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_6s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_5s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_4s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_3s]))
	val _ = UnitTest.assertEquals_Int(1, total_score_of_player_list([all_2s]))
	val _ = UnitTest.assertEquals_Int(~10, total_score_of_player_list([all_clubs, all_diamonds]))
	val _ = UnitTest.assertEquals_Int(3, total_score_of_player_list([all_diamonds, all_hearts]))
	val _ = UnitTest.assertEquals_Int(26, total_score_of_player_list([all_hearts, all_spades]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([all_clubs, all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertEquals_Int(2, total_score_of_player_list([all_7s, all_2s]))
	val _ = UnitTest.assertEquals_Int(2, total_score_of_player_list([all_aces, all_kings]))
	val _ = UnitTest.assertEquals_Int(15, total_score_of_player_list([all_aces, all_queens]))
	val _ = UnitTest.assertEquals_Int(~8, total_score_of_player_list([all_aces, all_jacks]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([all_aces, all_kings, all_queens]))
	val _ = UnitTest.assertEquals_Int(7, total_score_of_player_list([all_aces, all_kings, all_queens, all_jacks]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([all_aces, all_kings, all_queens, all_jacks, all_10s, all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([[], all_aces, all_kings, all_queens, all_jacks, all_10s, all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([all_aces, all_kings, all_queens, all_jacks, all_10s, [], all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s]))
	val _ = UnitTest.assertEquals_Int(16, total_score_of_player_list([all_aces, all_kings, all_queens, all_jacks, all_10s, all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s, []]))
    val _ = UnitTest.leave()


    (* ======================================================== *)
    (* NOTE: total_card_count_for_all_players may use length.   *)
    (* ======================================================== *)

    (* ======================================================== *)
    (* NOTE: total_card_count_for_all_players must use a higher order function. *)
    (* ======================================================== *)

	val _ = UnitTest.enter("total_card_count_for_all_players")
	val _ = UnitTest.assertEquals_Int(0, total_card_count_for_all_players([]))
	val _ = UnitTest.assertEquals_Int(0, total_card_count_for_all_players([[]]))
	val _ = UnitTest.assertEquals_Int(0, total_card_count_for_all_players([[],[]]))
	val _ = UnitTest.assertEquals_Int(0, total_card_count_for_all_players([[],[],[]]))
	val _ = UnitTest.assertEquals_Int(1, total_card_count_for_all_players([[(Spades, Queen)]]))
	val _ = UnitTest.assertEquals_Int(1, total_card_count_for_all_players([[(Hearts, King)]]))
	val _ = UnitTest.assertEquals_Int(1, total_card_count_for_all_players([[(Diamonds, Jack)]]))
	val _ = UnitTest.assertEquals_Int(1, total_card_count_for_all_players([[(Clubs, Ace)]]))
	val _ = UnitTest.assertEquals_Int(13, total_card_count_for_all_players([all_clubs]))
	val _ = UnitTest.assertEquals_Int(13, total_card_count_for_all_players([all_diamonds]))
	val _ = UnitTest.assertEquals_Int(13, total_card_count_for_all_players([all_hearts]))
	val _ = UnitTest.assertEquals_Int(13, total_card_count_for_all_players([all_spades]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_aces]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_kings]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_queens]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_jacks]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_10s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_9s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_8s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_7s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_6s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_5s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_4s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_3s]))
	val _ = UnitTest.assertEquals_Int(4, total_card_count_for_all_players([all_2s]))
	val _ = UnitTest.assertEquals_Int(26, total_card_count_for_all_players([all_clubs, all_diamonds]))
	val _ = UnitTest.assertEquals_Int(26, total_card_count_for_all_players([all_diamonds, all_hearts]))
	val _ = UnitTest.assertEquals_Int(26, total_card_count_for_all_players([all_hearts, all_spades]))
	val _ = UnitTest.assertEquals_Int(39, total_card_count_for_all_players([all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertEquals_Int(52, total_card_count_for_all_players([all_clubs, all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertEquals_Int(8, total_card_count_for_all_players([all_7s, all_2s]))
	val _ = UnitTest.assertEquals_Int(8, total_card_count_for_all_players([all_aces, all_kings]))
	val _ = UnitTest.assertEquals_Int(8, total_card_count_for_all_players([all_aces, all_queens]))
	val _ = UnitTest.assertEquals_Int(8, total_card_count_for_all_players([all_aces, all_jacks]))
	val _ = UnitTest.assertEquals_Int(12, total_card_count_for_all_players([all_aces, all_kings, all_queens]))
	val _ = UnitTest.assertEquals_Int(16, total_card_count_for_all_players([all_aces, all_kings, all_queens, all_jacks]))
	val _ = UnitTest.assertEquals_Int(52, total_card_count_for_all_players([all_aces, all_kings, all_queens, all_jacks, all_10s, all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s]))
    val _ = UnitTest.leave()

	val _ = UnitTest.enter("is_correct_total_of_cards")
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[],[]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[],[],[]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[(Spades, Queen)]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[(Hearts, King)]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[(Diamonds, Jack)]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([[(Clubs, Ace)]]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_clubs]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_diamonds]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_hearts]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_spades]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_aces]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_kings]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_queens]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_jacks]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_10s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_9s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_8s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_7s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_6s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_5s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_4s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_3s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_2s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_clubs, all_diamonds]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_diamonds, all_hearts]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_hearts, all_spades]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertTrue(is_correct_total_of_cards([all_clubs, all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_7s, all_2s]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_aces, all_kings]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_aces, all_queens]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_aces, all_jacks]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_aces, all_kings, all_queens]))
	val _ = UnitTest.assertFalse(is_correct_total_of_cards([all_aces, all_kings, all_queens, all_jacks]))
	val _ = UnitTest.assertTrue(is_correct_total_of_cards([all_aces, all_kings, all_queens, all_jacks, all_10s, all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s]))
    val _ = UnitTest.leave()


	val _ = UnitTest.enter("is_shenanigans_detected")
	val _ = UnitTest.assertTrue(is_shenanigans_detected([]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[],[]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[],[],[]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[(Spades, Queen)]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[(Hearts, King)]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[(Diamonds, Jack)]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([[(Clubs, Ace)]]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_clubs]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_diamonds]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_hearts]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_spades]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_aces]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_kings]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_queens]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_jacks]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_10s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_9s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_8s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_7s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_6s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_5s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_4s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_3s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_2s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_clubs, all_diamonds]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_diamonds, all_hearts]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_hearts, all_spades]))

    (* ======================================================== *)
	(* note: there are missing cards, but we fail to detect shenanigans due to all missing Clubs would count for 0 points anyway, so we get the expected result of 16 *)
	val _ = UnitTest.assertFalse(is_shenanigans_detected([all_diamonds, all_hearts, all_spades])) 
    (* ======================================================== *)
	
	
	val _ = UnitTest.assertFalse(is_shenanigans_detected([all_clubs, all_diamonds, all_hearts, all_spades]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_7s, all_2s]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_aces, all_kings]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_aces, all_queens]))
	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_aces, all_jacks]))

    (* ======================================================== *)
	(* note: there are missing cards, but we fail to detect shenanigans due to the ten missing Hearts are counter balanced by the missing Jack of Diamonds, so we get the expected result of 16 *)
	val _ = UnitTest.assertFalse(is_shenanigans_detected([all_aces, all_kings, all_queens]))
    (* ======================================================== *)

	val _ = UnitTest.assertTrue(is_shenanigans_detected([all_aces, all_kings, all_queens, all_jacks]))
	val _ = UnitTest.assertFalse(is_shenanigans_detected([all_aces, all_kings, all_queens, all_jacks, all_10s, all_9s, all_8s, all_7s, all_6s, all_5s, all_4s, all_3s, all_2s]))
    val _ = UnitTest.leave()

	val _ = print "<<< end test error output\n\n"
in
	()
end

